(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	// 检查环境是否支持Symbol,如果支持则使用Symbol.for创建唯一的symbol
	// 否则 fallback 到一个数值常量
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	/* 1. 使用Symbol可以创建全局唯一的值,不会与其它代码产生命名冲突
	2. 即使在未来版本中改变了fallback的magic number,之前的代码逻辑不会变,因为它们使用的还是Symbol.for创建的symbol值。
	3. 对环境没有Symbol支持的情况作了polyfill,保证在任何环境下都有一个唯一的值REPLACEMENT_ELEMENT_TYPE
	所以这段代码实现了一个跨环境的、唯一的值REACT_ELEMENT_TYPE。 */
	// 定义REACT_ELEMENT_TYPE, 这是react element的类型标识
	// 如果支持Symbol, 则使用Symbol.for创建,否则使用0xeac7这个magic number
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element') // 使用Symbol.for创建symbol
	    : 0xeac7; // fallback到magic number

	// 从shared包导入定义好的类型和常量
	/** ReactElement */
	// 实现ReactElement工厂函数
	const ReactElement = function (type, key, ref, props) {
	    // 使用导入的类型和常量,创建ReactElement对象
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'XiaoLang' // 自定义标识
	    };
	    return element;
	};
	// 检查config对象是否有有效的key或ref
	function hasValidKey(config) {
	    return config.key !== undefined;
	}
	function hasValidRef(config) {
	    return config.ref !== undefined;
	}
	// jsx函数实现JSX的转译
	// 接收 type, config对象和子元素参数
	// 从config对象中提取key, ref和props
	// 处理子元素参数,传入props.children
	// 使用ReactElement工厂函数创建并返回ReactElement对象
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // 从config中提取key和ref
	        if (prop === 'key') {
	            if (hasValidKey(config)) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref' && val !== undefined) {
	            if (hasValidRef(config)) {
	                ref = val;
	            }
	            continue;
	        }
	        // 其余属性添加到props对象
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        // 处理子元素参数,添加到props.children
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    // 使用ReactElement工厂函数创建ReactElement对象并返回
	    return ReactElement(type, key, ref, props);
	};
	const jsxDev = jsx;

	exports.jsx = jsx;
	exports.jsxDev = jsxDev;

}));
